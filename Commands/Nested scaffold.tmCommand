<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby
require File.join(ENV["TM_SUPPORT_PATH"], "lib", "exit_codes")
require File.join(ENV["TM_SUPPORT_PATH"], "lib", "ui")
require File.join(ENV['TM_BUNDLE_SUPPORT'], "lib", "dependencies")
matches = ENV["TM_FILENAME"].match /\A(.*)_controller\.rb\Z/u
TextMate.exit_show_tool_tip "Error: you don't seem to be in a controller." if matches.nil?
model = matches[1].classify
table_name = model.tableize
singular = table_name.singularize
parent_model = TextMate::UI.request_string({:title =&gt; "Nested scaffold", :prompt =&gt; "Enter the name of the parent model:", :default =&gt; "Parent"}).to_s.strip
TextMate.exit_show_tool_tip "Error: use \"Simple scaffold\" if you have no parent model." if parent_model.blank?
parent_table_name = parent_model.tableize
parent_singular = parent_table_name.singularize
print &lt;&lt;-eos

  before_filter :load_parent
  before_filter :current_object, :only =&gt; [:show, :edit, :update, :destroy]
  before_filter :build_object, :only =&gt; [:new, :create]

  def index
    @#{table_name} = @#{parent_singular}.#{table_name}.all
  end
  
  def show
  end

  def new
  end

  def edit
  end

  def create
    if @#{singular}.save
      flash[:notice] = "#{model} was successfully created."
      redirect_to_index
    else
      render :action =&gt; "new"
    end
  end

  def update
    if @#{singular}.update_attributes(params[:#{singular}])
      flash[:notice] = "#{model} was successfully updated."
      redirect_to_index
    else
      render :action =&gt; "edit"
    end
  end

  def destroy
    flash[:notice] = "#{model} was successfully deleted."
    @#{singular}.destroy
    redirect_to_index
  end

private

  def load_parent
    @#{parent_singular} = #{parent_model}.find(params[:#{parent_singular}_id])
  rescue ActiveRecord::RecordNotFound
    flash[:error] = "Error: #{parent_model} could not be found."
    redirect_to #{parent_table_name}_path
  end

  def current_object
    @#{singular} = @#{parent_singular}.#{table_name}.find(params[:id])
  rescue ActiveRecord::RecordNotFound
    flash[:error] = "Error: #{model} could not be found."
    redirect_to_index
  end

  def build_object
    @#{singular} = @#{parent_singular}.#{table_name}.build(params[:#{singular}])
    @#{singular}.#{parent_singular} = @#{parent_singular}
  end

  def redirect_to_index
    redirect_to :action =&gt; "index"
  end
eos</string>
	<key>input</key>
	<string>none</string>
	<key>keyEquivalent</key>
	<string>^ </string>
	<key>name</key>
	<string>Nested scaffold</string>
	<key>output</key>
	<string>afterSelectedText</string>
	<key>scope</key>
	<string>source.ruby, source.ruby.rails</string>
	<key>uuid</key>
	<string>8DCF7C3A-BB0B-4720-95BA-86D444C1DDE4</string>
</dict>
</plist>
